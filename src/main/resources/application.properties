server.port=8087

###OAUTH config###

#mywebclient is an idea you can name yourself and is different for each client
#Google is pre-configured
#spring.security.oauth2.client.registration.google.client-id=425625931744-v6bjcrkt3bvbnp7dnbginaqcrdpivv4u.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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

#spring.security.oauth2.client.registration.facebook.client-id=1313202859109148
#spring.security.oauth2.client.registration.facebook.client-secret=df363784f203bfbaf6589c769988050f

spring.security.oauth2.client.registration.okta.client-id=0oaaae544bJi9GWSn696
spring.security.oauth2.client.registration.okta.client-secret=msfA-h0rHjS3mgI2SGnwCuZtbyWosFevjdqxGbPl
spring.security.oauth2.client.registration.okta.scope=openid, profile

#The domain name of your okta account
spring.security.oauth2.client.provider.okta.issuer-uri=https://outlookshabloel.okta.com/oauth2/default

#To communicate with the authorization providor Facebook, Google or even Githib, Spring already has this done for you.
#spring.security.oauth2.client.provider.mywebclient.authorization-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.mywebclient.token-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/token
#spring.security.oauth2.client.provider.mywebclient.jwk-set-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
#spring.security.oauth2.client.provider.mywebclient.user-info-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/userinfo
#spring.security.oauth2.client.provider.mywebclient.user-name-attribute=preferred_username
